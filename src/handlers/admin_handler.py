import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from config.config import is_admin
from src.utils.admin_utils import (
    add_allowed_folder, remove_allowed_folder, list_allowed_folders,
    add_allowed_user, remove_allowed_user, list_allowed_users,
    update_folder_permissions, add_user_to_folder, remove_user_from_folder,
    load_allowed_users, load_allowed_folders
)
from src.utils.state_manager import state_manager
from src.utils.yadisk_helper import YaDiskHelper
import os

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
ADMIN_MENU = 0
ADD_FOLDER = 1
REMOVE_FOLDER = 2
ADD_USER = 3
REMOVE_USER = 4
FOLDER_PATH = 5
USER_ID = 6
FOLDER_PERMISSIONS = 7
SELECT_FOLDER = 8
SELECT_USERS = 9
BROWSE_FOLDERS = 10
SELECT_SUBFOLDER = 11
CREATE_SUBFOLDER = 12

logger = logging.getLogger(__name__)
yadisk_helper = YaDiskHelper()

def normalize_path(path):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    path = path.replace("disk:", "")
    path = path.replace("//", "/")
    path = path.rstrip("/")
    if not path.startswith("/"):
        path = "/" + path
    return path

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ["üìÅ –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É", "üóë –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É"],
        ["üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
        ["üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏", "üìã –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫"],
        ["üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîô –í—ã—Ö–æ–¥"]
    ]
    
    await update.message.reply_text(
        "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return ADMIN_MENU

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üìÅ –î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        context.user_data["current_path"] = "/"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ
        try:
            items = list(yadisk_helper.disk.listdir("/"))
            folders = [item for item in items if item.type == "dir"]
            
            if not folders:
                await update.message.reply_text(
                    "üìÇ –í –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ø–∞–ø–æ–∫. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?",
                    reply_markup=ReplyKeyboardMarkup([
                        ["üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"], 
                        ["üîô –ù–∞–∑–∞–¥"]
                    ], one_time_keyboard=True, resize_keyboard=True)
                )
                context.user_data["current_path"] = "/"
                return CREATE_SUBFOLDER
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            context.user_data["folders"] = folders
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            message = "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö:\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            MAX_FOLDERS_PER_MESSAGE = 20
            
            for i, folder in enumerate(folders, 1):
                folder_name = folder.name
                keyboard.append([f"{i}. {folder_name}"])
                
                if i <= MAX_FOLDERS_PER_MESSAGE:
                    message += f"{i}. üìÅ {folder_name}\n"
            
            if len(folders) > MAX_FOLDERS_PER_MESSAGE:
                message += f"\n... –∏ –µ—â–µ {len(folders) - MAX_FOLDERS_PER_MESSAGE} –ø–∞–ø–æ–∫.\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
            
            keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"])
            keyboard.append(["üîô –ù–∞–∑–∞–¥"])
            
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            
            return BROWSE_FOLDERS
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
            return ADMIN_MENU
    
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É":
        folders = list_allowed_folders()
        
        if folders == "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –ø—É—Å—Ç":
            await update.message.reply_text(
                "‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å."
            )
            return await admin(update, context)
        
        await update.message.reply_text(
            f"{folders}\n\n"
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –ø–æ–ª–Ω—ã–π –ø—É—Ç—å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–µ–∫—Ç123\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        
        return REMOVE_FOLDER
    
    elif text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.\n\n"
            "–ì–¥–µ –≤–∑—è—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n"
            "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @userinfobot\n"
            "2. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å ID\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        
        return ADD_USER
    
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        users = list_allowed_users()
        
        if users == "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç":
            await update.message.reply_text(
                "‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å."
            )
            return await admin(update, context)
        
        await update.message.reply_text(
            f"{users}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        
        return REMOVE_USER
    
    elif text == "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏":
        folders = load_allowed_folders()
        
        if not folders:
            await update.message.reply_text(
                "‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫–∏."
            )
            return await admin(update, context)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
        keyboard = [[folder['path']] for folder in folders]
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        
        return SELECT_FOLDER
    
    elif text == "üìã –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫":
        folders = list_allowed_folders()
        
        await update.message.reply_text(
            folders,
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        
        return ADMIN_MENU
    
    elif text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        users = list_allowed_users()
        
        await update.message.reply_text(
            users,
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        
        return ADMIN_MENU
    
    elif text == "üîô –í—ã—Ö–æ–¥":
        await update.message.reply_text(
            "‚úÖ –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END
    
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."
        )
        
        return await admin(update, context)

async def browse_folders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    current_path = context.user_data.get("current_path", "/")
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    if text == "üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É":
        await update.message.reply_text(
            f"üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{current_path}':",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return CREATE_SUBFOLDER
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    if text[0].isdigit():
        folder_idx = int(text.split(".")[0]) - 1
        folders = context.user_data.get("folders", [])
        
        if 0 <= folder_idx < len(folders):
            selected_folder = folders[folder_idx]
            selected_path = normalize_path(selected_folder.path)
            
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –ø–∞–ø–∫—É: {selected_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
            context.user_data["current_path"] = selected_path
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            try:
                items = list(yadisk_helper.disk.listdir(selected_path))
                subfolders = [item for item in items if item.type == "dir"]
                
                if not subfolders:
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∞–ø–æ–∫ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É
                    await update.message.reply_text(
                        f"üìÇ –ü–∞–ø–∫–∞ '{selected_path}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–ø–∞–ø–æ–∫.\n\n"
                        "–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö?",
                        reply_markup=ReplyKeyboardMarkup([
                            ["‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É"], 
                            ["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É"],
                            ["üîô –ö –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫"],
                            ["‚ùå –û—Ç–º–µ–Ω–∞"]
                        ], one_time_keyboard=True, resize_keyboard=True)
                    )
                    return SELECT_SUBFOLDER
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
                context.user_data["folders"] = subfolders
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏
                keyboard = []
                message = f"üìÇ –ü–æ–¥–ø–∞–ø–∫–∏ –≤ '{selected_path}':\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                MAX_FOLDERS_PER_MESSAGE = 20
                
                for i, folder in enumerate(subfolders, 1):
                    folder_name = folder.name
                    keyboard.append([f"{i}. {folder_name}"])
                    
                    if i <= MAX_FOLDERS_PER_MESSAGE:
                        message += f"{i}. üìÅ {folder_name}\n"
                
                if len(subfolders) > MAX_FOLDERS_PER_MESSAGE:
                    message += f"\n... –∏ –µ—â–µ {len(subfolders) - MAX_FOLDERS_PER_MESSAGE} –ø–∞–ø–æ–∫.\n"
                    message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
                
                keyboard.append(["‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É"])
                keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É"])
                keyboard.append(["üîô –ö –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫"])
                keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
                
                await update.message.reply_text(
                    message,
                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                )
                
                return BROWSE_FOLDERS
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∞–ø–æ–∫: {str(e)}",
                    reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
                )
                return ADMIN_MENU
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
            return BROWSE_FOLDERS
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return BROWSE_FOLDERS

async def select_subfolder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∞–ø–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏"""
    text = update.message.text
    current_path = context.user_data.get("current_path", "/")
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=ReplyKeyboardRemove()
        )
        return await admin(update, context)
    
    if text == "üîô –ö –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫
        context.user_data["current_path"] = "/"
        
        try:
            items = list(yadisk_helper.disk.listdir("/"))
            folders = [item for item in items if item.type == "dir"]
            context.user_data["folders"] = folders
            
            keyboard = []
            
            for i, folder in enumerate(folders, 1):
                keyboard.append([f"{i}. {folder.name}"])
            
            keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"])
            keyboard.append(["üîô –ù–∞–∑–∞–¥"])
            
            await update.message.reply_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö:",
                reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            
            return BROWSE_FOLDERS
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
            return await admin(update, context)
    
    if text == "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É":
        await update.message.reply_text(
            f"üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∞–ø–∫–∏ –≤ '{current_path}':",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return CREATE_SUBFOLDER
    
    if text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É":
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        success, message = add_allowed_folder(current_path)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ {message}\n\n"
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ?",
                reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
            )
            context.user_data["current_folder"] = current_path
            return FOLDER_PERMISSIONS
        else:
            await update.message.reply_text(
                f"‚ùå {message}",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
            return ADMIN_MENU
    
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        reply_markup=ReplyKeyboardMarkup([["üîô –ö –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫"], ["‚ùå –û—Ç–º–µ–Ω–∞"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECT_SUBFOLDER

async def create_subfolder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∞–ø–∫—É –≤ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏"""
    text = update.message.text
    current_path = context.user_data.get("current_path", "/")
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await browse_folders(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not text or text.isspace():
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return CREATE_SUBFOLDER
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
    new_folder_path = f"{current_path}/{text}"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞–ø–∫–∞
        if yadisk_helper.disk.exists(new_folder_path):
            await update.message.reply_text(
                f"‚ùå –ü–∞–ø–∫–∞ '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
            return CREATE_SUBFOLDER
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        yadisk_helper.disk.mkdir(new_folder_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{new_folder_path}'")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        await update.message.reply_text(
            f"‚úÖ –ü–∞–ø–∫–∞ '{text}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ '{current_path}'.\n\n"
            "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö?",
            reply_markup=ReplyKeyboardMarkup([
                ["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ"], 
                ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
        context.user_data["current_path"] = new_folder_path
        return SELECT_SUBFOLDER
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return ADMIN_MENU

async def handle_folder_path(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –ø–∞–ø–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    success, message = add_allowed_folder(text)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ {message}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ?",
            reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data["current_folder"] = text
        return FOLDER_PERMISSIONS
    else:
        await update.message.reply_text(
            f"‚ùå {message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return FOLDER_PATH

async def handle_folder_permissions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ"""
    text = update.message.text
    
    if text == "–ù–µ—Ç":
        return await admin(update, context)
    
    if text == "–î–∞":
        users = load_allowed_users()
        folder_path = context.user_data.get("current_folder")
        
        if not users:
            await update.message.reply_text(
                "‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
            return ADMIN_MENU
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ–ø—Ü–∏–µ–π "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        keyboard = []
        for user in users:
            name = user.get('username') or user.get('first_name') or f"ID: {user['id']}"
            keyboard.append([f"{name} [{user['id']}]"])
        
        keyboard.append(["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"])
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–∞–ø–∫–µ '{folder_path}'.\n"
            "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞.\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        context.user_data["selected_users"] = []
        
        return SELECT_USERS
    
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
        reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    )
    
    return FOLDER_PERMISSIONS

async def handle_select_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        folder_path = context.user_data.get("current_folder")
        selected_users = context.user_data.get("selected_users", [])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
        success, message = update_folder_permissions(folder_path, selected_users)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ {message}",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
        else:
            await update.message.reply_text(
                f"‚ùå {message}",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
            )
        
        return await admin(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "name [id]")
    try:
        user_id = int(text.split('[')[-1].split(']')[0])
        
        selected_users = context.user_data.get("selected_users", [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in selected_users:
            selected_users.remove(user_id)
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
        else:
            selected_users.append(user_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–∞")
        
        context.user_data["selected_users"] = selected_users
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    return SELECT_USERS

async def handle_select_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    folders = load_allowed_folders()
    folder_exists = False
    current_users = []
    
    for folder in folders:
        if folder['path'] == text:
            folder_exists = True
            current_users = folder.get('allowed_users', [])
            break
    
    if not folder_exists:
        await update.message.reply_text(
            "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return await admin(update, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    context.user_data["current_folder"] = text
    context.user_data["selected_users"] = current_users
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_allowed_users()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –≤—ã–¥–µ–ª—è–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    keyboard = []
    for user in users:
        name = user.get('username') or user.get('first_name') or f"ID: {user['id']}"
        prefix = "‚úÖ " if user['id'] in current_users else ""
        keyboard.append([f"{prefix}{name} [{user['id']}]"])
    
    keyboard.append(["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"])
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    
    await update.message.reply_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ '{text}'.\n\n"
        f"{'‚úÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' if current_users else '‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'}.\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞.\n"
        "–ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
    )
    
    return SELECT_USERS

async def handle_remove_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    success, message = remove_allowed_folder(text)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ {message}",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"‚ùå {message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    return await admin(update, context)

async def handle_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    try:
        user_id = int(text.strip())
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return ADD_USER
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —á–∞—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    username = None
    first_name = None
    last_name = None
    
    chat_member = await update.effective_chat.get_member(user_id=user_id)
    if chat_member:
        username = chat_member.user.username
        first_name = chat_member.user.first_name
        last_name = chat_member.user.last_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    success, message = add_allowed_user(user_id, username, first_name, last_name)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ {message}",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"‚ùå {message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    return await admin(update, context)

async def handle_remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = update.message.text
    
    if text == "üîô –ù–∞–∑–∞–¥":
        return await admin(update, context)
    
    try:
        user_id = int(text.strip())
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return REMOVE_USER
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    success, message = remove_allowed_user(user_id)
    
    if success:
        await update.message.reply_text(
            f"‚úÖ {message}",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"‚ùå {message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], one_time_keyboard=True, resize_keyboard=True)
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    return await admin(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END 