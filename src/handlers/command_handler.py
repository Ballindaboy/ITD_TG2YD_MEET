import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from src.utils.state_manager import state_manager
from src.utils.yadisk_helper import YaDiskHelper
import os

logger = logging.getLogger(__name__)
yadisk_helper = YaDiskHelper()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –¥–∏–∞–ª–æ–≥–∞
CHOOSE_CATEGORY, NAVIGATE_FOLDERS, CREATE_FOLDER = range(3)

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_PATHS = {
    "suppliers": "/TD/TD.Equipment.Suppliers",
    "clients": "/TD/TD.Equipment.Clients",
    "offers": "/TD/TD.Equipment.Offers"
}

def normalize_path(path):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    path = path.replace("disk:", "")
    path = path.replace("//", "/")
    path = path.rstrip("/")
    if not path.startswith("/"):
        path = "/" + path
    return path

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/current - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    await update.message.reply_text(
        "üîñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/current - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç - –æ–Ω –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –æ—Ç—á–µ—Ç\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ - –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
    )

async def new_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = [
        ["1. –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ (TD.Equipment.Suppliers)"],
        ["2. –ö–ª–∏–µ–Ω—Ç—ã (TD.Equipment.Clients)"],
        ["3. –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (TD.Equipment.Offers)"]
    ]
    
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return CHOOSE_CATEGORY

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = None
    if "1" in text or "–ü–æ—Å—Ç–∞–≤—â–∏–∫" in text or "Suppliers" in text:
        category = "suppliers"
        category_name = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
    elif "2" in text or "–ö–ª–∏–µ–Ω—Ç" in text or "Clients" in text:
        category = "clients"
        category_name = "–ö–ª–∏–µ–Ω—Ç—ã"
    elif "3" in text or "–¶–µ–Ω–æ–≤" in text or "Offers" in text:
        category = "offers"
        category_name = "–¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return CHOOSE_CATEGORY
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    state_manager.set_data(user_id, "category", category)
    state_manager.set_data(user_id, "category_name", category_name)
    
    # –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    current_path = CATEGORY_PATHS[category]
    state_manager.set_data(user_id, "current_path", current_path)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        logger.info(f"–ò—â–µ–º –ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{current_path}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not yadisk_helper.disk.exists(current_path):
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{current_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await update.message.reply_text(
                f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{current_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        items = list(yadisk_helper.disk.listdir(current_path))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        folders = [item for item in items if item.type == "dir"]
        logger.info(f"–ò–∑ –Ω–∏—Ö {len(folders)} –ø–∞–ø–æ–∫")
        
        if not folders:
            await update.message.reply_text(
                f"üìÇ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} –Ω–µ—Ç –ø–∞–ø–æ–∫.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        state_manager.set_data(user_id, "folders", folders)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        message = f"üìÇ –ü–∞–ø–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}:\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        MAX_FOLDERS_PER_MESSAGE = 20
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for i, folder in enumerate(folders, 1):
            folder_name = folder.name
            keyboard.append([f"{i}. {folder_name}"])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
            if i <= MAX_FOLDERS_PER_MESSAGE:
                message += f"{i}. üìÅ {folder_name}\n"
        
        # –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º MAX_FOLDERS_PER_MESSAGE, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if len(folders) > MAX_FOLDERS_PER_MESSAGE:
            message += f"\n... –∏ –µ—â–µ {len(folders) - MAX_FOLDERS_PER_MESSAGE} –ø–∞–ø–æ–∫.\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
        
        keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"])
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
        
        await update.message.reply_text(
            message,
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        
        return NAVIGATE_FOLDERS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def navigate_folders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    category = state_manager.get_data(user_id, "category")
    category_name = state_manager.get_data(user_id, "category_name")
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    if text == "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É":
        await update.message.reply_text(
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CREATE_FOLDER
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
        if text[0].isdigit():
            folder_idx = int(text.split(".")[0]) - 1
            folders = state_manager.get_data(user_id, "folders")
            
            if 0 <= folder_idx < len(folders):
                selected_folder = folders[folder_idx]
                folder_path = normalize_path(selected_folder.path)
                folder_name = selected_folder.name
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
                return await start_session(update, context, category, folder_path, folder_name)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def start_session(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str, folder_path: str, folder_name: str) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤—Å—Ç—Ä–µ—á–∏"""
    from src.utils.state_manager import SessionState
    
    user_id = update.effective_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = SessionState(category, folder_path, folder_name)
        state_manager.set_session(user_id, session)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
        yadisk_helper.create_text_file(session.txt_file_path, "")
        
        await update.message.reply_text(
            f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {state_manager.get_data(user_id, 'category_name')}\n"
            f"–ü–∞–ø–∫–∞: {folder_name}\n"
            f"–§–∞–π–ª: {session.get_txt_filename()}\n\n"
            f"‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switch",
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def switch_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É"""
    user_id = update.effective_user.id
    session = state_manager.get_session(user_id)
    
    if session:
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        completed_folder_name = session.folder_name
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        state_manager.clear_session(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
        keyboard = [["üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"]]
        
        await update.message.reply_text(
            "üîö –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {completed_folder_name}.",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
        keyboard = [["üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"]]
        
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏.",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )

async def current_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–µ"""
    user_id = update.effective_user.id
    session = state_manager.get_session(user_id)
    
    if session:
        category_name = ""
        if session.category == "suppliers":
            category_name = "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏"
        elif session.category == "clients":
            category_name = "–ö–ª–∏–µ–Ω—Ç—ã"
        elif session.category == "offers":
            category_name = "–¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
            
        await update.message.reply_text(
            f"üìã –¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–ü–∞–ø–∫–∞: {session.folder_name}\n"
            f"–§–∞–π–ª: {session.get_txt_filename()}"
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
        keyboard = [["üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"]]
        
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏.",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def create_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏"""
    user_id = update.effective_user.id
    folder_name = update.message.text.strip()
    category = state_manager.get_data(user_id, "category")
    current_path = state_manager.get_data(user_id, "current_path")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        if len(folder_name) < 2:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return CREATE_FOLDER
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ '{folder_name}' –≤ –ø—É—Ç–∏ '{current_path}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        folder_path = f"{current_path}/{folder_name}"
        folder_path = normalize_path(folder_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        if not yadisk_helper.disk.exists(folder_path):
            yadisk_helper.disk.mkdir(folder_path)
            logger.info(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {folder_path}")
            
            await update.message.reply_text(
                f"‚úÖ –ü–∞–ø–∫–∞ '{folder_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n"
                f"–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ."
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
            return await start_session(update, context, category, folder_path, folder_name)
        else:
            logger.warning(f"–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}")
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º '{folder_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–µ."
            )
            return await start_session(update, context, category, folder_path, folder_name)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        return await new_meeting(update, context) 