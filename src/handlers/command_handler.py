import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext
from src.utils.state_manager import state_manager
from src.utils.yadisk_helper import YaDiskHelper
from src.utils.admin_utils import load_allowed_folders, get_allowed_folders_for_user, is_folder_allowed_for_user, get_user_data
import os
from datetime import datetime

logger = logging.getLogger(__name__)
yadisk_helper = YaDiskHelper()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –¥–∏–∞–ª–æ–≥–∞
CHOOSE_FOLDER, NAVIGATE_SUBFOLDERS, CREATE_FOLDER = range(3)

def normalize_path(path):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    path = path.replace("disk:", "")
    path = path.replace("//", "/")
    path = path.rstrip("/")
    if not path.startswith("/"):
        path = "/" + path
    return path

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/current - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    await update.message.reply_text(
        "üîñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/current - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç - –æ–Ω –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –æ—Ç—á–µ—Ç\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ - –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
    )

async def new_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    allowed_folders = get_allowed_folders_for_user(user_id)
    
    if not allowed_folders:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
    keyboard = []
    for i, folder in enumerate(allowed_folders, 1):
        keyboard.append([f"{i}. {folder}"])
    
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state_manager.set_data(user_id, "allowed_folders", allowed_folders)
    
    return CHOOSE_FOLDER

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    if text[0].isdigit():
        folder_idx = int(text.split(".")[0]) - 1
        allowed_folders = state_manager.get_data(user_id, "allowed_folders")
        
        if 0 <= folder_idx < len(allowed_folders):
            selected_folder = allowed_folders[folder_idx]
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–∞–ø–∫—É: {selected_folder}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
            state_manager.set_data(user_id, "selected_folder", selected_folder)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if not yadisk_helper.disk.exists(selected_folder):
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    yadisk_helper.disk.mkdir(selected_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{selected_folder}'")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫
                items = list(yadisk_helper.disk.listdir(selected_folder))
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
                
                folders = [item for item in items if item.type == "dir"]
                logger.info(f"–ò–∑ –Ω–∏—Ö {len(folders)} –ø–∞–ø–æ–∫")
                
                if not folders:
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∞–ø–æ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä—è–º–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
                    return await start_session(update, context, selected_folder, selected_folder)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫
                state_manager.set_data(user_id, "folders", folders)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                message = f"üìÇ –ü–æ–¥–ø–∞–ø–∫–∏ –≤ '{selected_folder}':\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                MAX_FOLDERS_PER_MESSAGE = 20
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                for i, folder in enumerate(folders, 1):
                    folder_name = folder.name
                    keyboard.append([f"{i}. {folder_name}"])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
                    if i <= MAX_FOLDERS_PER_MESSAGE:
                        message += f"{i}. üìÅ {folder_name}\n"
                
                # –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º MAX_FOLDERS_PER_MESSAGE, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if len(folders) > MAX_FOLDERS_PER_MESSAGE:
                    message += f"\n... –∏ –µ—â–µ {len(folders) - MAX_FOLDERS_PER_MESSAGE} –ø–∞–ø–æ–∫.\n"
                    message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
                keyboard.append(["üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É"])
                keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É"])
                keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
                
                await update.message.reply_text(
                    message,
                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                )
                
                return NAVIGATE_SUBFOLDERS
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSE_FOLDER

async def navigate_folders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–ø–∞–ø–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    selected_folder = state_manager.get_data(user_id, "selected_folder")
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    if text == "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É":
        await update.message.reply_text(
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∞–ø–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CREATE_FOLDER
    
    if text == "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É":
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        return await start_session(update, context, selected_folder, selected_folder)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
        if text[0].isdigit():
            folder_idx = int(text.split(".")[0]) - 1
            folders = state_manager.get_data(user_id, "folders")
            
            if 0 <= folder_idx < len(folders):
                selected_subfolder = folders[folder_idx]
                folder_path = normalize_path(selected_subfolder.path)
                folder_name = selected_subfolder.name
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∞–ø–∫–µ
                return await start_session(update, context, selected_folder, folder_path)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def create_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∞–ø–∫—É"""
    user_id = update.effective_user.id
    text = update.message.text
    selected_folder = state_manager.get_data(user_id, "selected_folder")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not text or text.isspace():
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
    new_folder_path = f"{selected_folder}/{text}"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞–ø–∫–∞
        if yadisk_helper.disk.exists(new_folder_path):
            await update.message.reply_text(
                f"‚ùå –ü–∞–ø–∫–∞ '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        yadisk_helper.disk.mkdir(new_folder_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{new_folder_path}'")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
        return await start_session(update, context, selected_folder, new_folder_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def start_session(update: Update, context: ContextTypes.DEFAULT_TYPE, root_folder: str, folder_path: str) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤—Å—Ç—Ä–µ—á–∏"""
    from src.utils.state_manager import SessionState
    
    user_id = update.effective_user.id
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
    root_folder = normalize_path(root_folder)
    folder_path = normalize_path(folder_path)
    folder_name = os.path.basename(folder_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data = get_user_data(user_id)
    user_full_name = None
    if user_data:
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        if first_name or last_name:
            user_full_name = f"{first_name} {last_name}".strip()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = SessionState(root_folder, folder_path, folder_name, user_id)
        state_manager.set_session(user_id, session)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        start_msg = f"–ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø–∞–ø–∫–µ: {folder_path}"
        session.add_message(start_msg, author=user_full_name)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
        yadisk_helper.create_text_file(session.txt_file_path, f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {start_msg}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏
        await update.message.reply_text(
            f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n"
            f"–ü–∞–ø–∫–∞: {folder_path}\n"
            f"–§–∞–π–ª: {session.get_txt_filename()}\n\n"
            f"‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switch\n\n"
            f"‚è± –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º job_queue –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        context.job_queue.run_once(
            lambda context: check_session_activity(context, user_id),
            600,  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            data=user_id,
            name=f"session_timeout_{user_id}"
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def check_session_activity(context: CallbackContext, user_id: int) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = state_manager.get_session(user_id)
    if not session:
        logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data="end_session")],
        [InlineKeyboardButton("‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ—â–µ 10 –º–∏–Ω—É—Ç", callback_data="extend_session")]
    ])
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é
        await context.bot.send_message(
            chat_id=user_id,
            text="‚è± –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n–•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É?",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

async def handle_session_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == "end_session":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        await end_session_and_show_summary(update, context)
    elif data == "extend_session":
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—â–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
        await query.edit_message_text(
            text="‚úÖ –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –µ—â–µ –Ω–∞ 10 –º–∏–Ω—É—Ç."
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        context.job_queue.run_once(
            lambda context: check_session_activity(context, user_id),
            600,  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            data=user_id,
            name=f"session_timeout_{user_id}"
        )

async def end_session_and_show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    """
    user_id = update.effective_user.id
    session = state_manager.get_session(user_id)
    
    if not session:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏
    summary = session.get_session_summary()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    end_msg = f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø–∞–ø–∫–µ: {session.folder_path}"
    session.add_message(end_msg)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = yadisk_helper.get_file_content(session.txt_file_path)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –∑–∞–ø–∏—Å—å
        content += f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {end_msg}"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        yadisk_helper.update_text_file(session.txt_file_path, content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤—Å—Ç—Ä–µ—á–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_final_comment")]
    ])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n{summary[:3900]}...",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n{summary[:3900]}...",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup=keyboard
        )
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    state_manager.clear_session(user_id)
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_jobs = context.job_queue.get_jobs_by_name(f"session_timeout_{user_id}")
    for job in current_jobs:
        job.schedule_removal()

async def switch_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /switch - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    session = state_manager.get_session(user_id)
    if session:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        await end_session_and_show_summary(update, context)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É
    return await new_meeting(update, context)

async def current_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /current - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–µ"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    session = state_manager.get_session(user_id)
    if session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_data(user_id)
        user_info = ""
        if user_data:
            first_name = user_data.get('first_name', '')
            last_name = user_data.get('last_name', '')
            if first_name or last_name:
                user_info = f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {first_name} {last_name}\n"
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        files_count = len(session.file_history)
        messages_count = len(session.message_history)
        
        await update.message.reply_text(
            f"üìù –¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n"
            f"üìÇ –ü–∞–ø–∫–∞: {session.folder_path}\n"
            f"üìÑ –§–∞–π–ª: {session.get_txt_filename()}\n"
            f"‚è± –ù–∞—á–∞–ª–æ: {session.created_at}\n"
            f"{user_info}"
            f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}, –§–∞–π–ª–æ–≤: {files_count}\n\n"
            f"‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ."
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É."
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏")
    
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END 