import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext
from src.utils.state_manager import state_manager, SessionState
from src.utils.yadisk_helper import YaDiskHelper
from src.utils.admin_utils import load_allowed_folders, get_allowed_folders_for_user, is_folder_allowed_for_user, get_user_data
import os
from datetime import datetime
from src.utils.folder_navigation import FolderNavigator

logger = logging.getLogger(__name__)
disk_helper = YaDiskHelper()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –¥–∏–∞–ª–æ–≥–∞
CHOOSE_FOLDER, NAVIGATE_SUBFOLDERS, CREATE_FOLDER = range(3)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ FolderNavigator
async def folder_selected_callback(update, context, selected_path):
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–∞–ø–∫—É: {selected_path}")
    
    # –í—ã–∑—ã–≤–∞–µ–º handle_selected_folder –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    await handle_selected_folder(update, context, selected_path)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å FolderNavigator, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    return True

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –ø–æ –ø–∞–ø–∫–∞–º
folder_navigator = FolderNavigator(
    yadisk_helper=disk_helper,
    title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:",
    add_current_folder_button=False,
    create_folder_button=False,
    extra_buttons=["‚ùå –û—Ç–º–µ–Ω–∞"]
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
folder_navigator.folder_selected_callback = folder_selected_callback

def normalize_path(path):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
    path = path.replace("disk:", "")
    path = path.replace("//", "/")
    path = path.rstrip("/")
    if not path.startswith("/"):
        path = "/" + path
    return path

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/current - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    await update.message.reply_text(
        "üîñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/current - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç - –æ–Ω –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –æ—Ç—á–µ—Ç\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ - –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
    )

async def new_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    allowed_folders = get_allowed_folders_for_user(user_id)
    
    if not allowed_folders:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
    keyboard = []
    for i, folder in enumerate(allowed_folders, 1):
        keyboard.append([f"{i}. {folder}"])
    
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state_manager.set_data(user_id, "allowed_folders", allowed_folders)
    
    return CHOOSE_FOLDER

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
    if text[0].isdigit():
        folder_idx = int(text.split(".")[0]) - 1
        allowed_folders = state_manager.get_data(user_id, "allowed_folders")
        
        if 0 <= folder_idx < len(allowed_folders):
            selected_folder = allowed_folders[folder_idx]
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–∞–ø–∫—É: {selected_folder}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
            state_manager.set_data(user_id, "selected_folder", selected_folder)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if not disk_helper.disk.exists(selected_folder):
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    disk_helper.disk.mkdir(selected_folder)
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{selected_folder}'")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫
                try:
                    items = list(disk_helper.disk.listdir(selected_folder))
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {selected_folder}")
                    
                    # –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ç–∏–ø
                    folders = []
                    for item in items:
                        if hasattr(item, 'type') and item.type == "dir":
                            folders.append(item)
                            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {item.name}, –ü—É—Ç—å: {item.path}")
                        else:
                            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {item.name}, –¢–∏–ø: {getattr(item, 'type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                    
                    logger.info(f"–ò–∑ –Ω–∏—Ö {len(folders)} –ø–∞–ø–æ–∫")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫
                    state_manager.set_data(user_id, "folders", folders)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = []
                    message = f"üìÇ –ü–æ–¥–ø–∞–ø–∫–∏ –≤ '{selected_folder}':\n\n"
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    MAX_FOLDERS_PER_MESSAGE = 20
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏
                    if folders:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        for i, folder in enumerate(folders, 1):
                            folder_name = folder.name
                            keyboard.append([f"{i}. {folder_name}"])
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
                            if i <= MAX_FOLDERS_PER_MESSAGE:
                                message += f"{i}. üìÅ {folder_name}\n"
                        
                        # –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º MAX_FOLDERS_PER_MESSAGE, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if len(folders) > MAX_FOLDERS_PER_MESSAGE:
                            message += f"\n... –∏ –µ—â–µ {len(folders) - MAX_FOLDERS_PER_MESSAGE} –ø–∞–ø–æ–∫.\n"
                            message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
                    else:
                        message = f"üìÇ –í –ø–∞–ø–∫–µ '{selected_folder}' –Ω–µ—Ç –ø–æ–¥–ø–∞–ø–æ–∫.\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
                    keyboard.append(["üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É"])
                    keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É"])
                    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
                    
                    await update.message.reply_text(
                        message,
                        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                    )
                    
                    return NAVIGATE_SUBFOLDERS
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
                    await update.message.reply_text(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return ConversationHandler.END
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSE_FOLDER

async def navigate_folders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–ø–∞–ø–∫–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    selected_folder = state_manager.get_data(user_id, "selected_folder")
    
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª '{text}' –≤ –ø–∞–ø–∫–µ '{selected_folder}'")
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    if text == "üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É":
        await update.message.reply_text(
            "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∞–ø–∫–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CREATE_FOLDER
    
    if text == "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É":
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        return await start_session(update, context, selected_folder, selected_folder)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
        if text[0].isdigit():
            folder_idx = int(text.split(".")[0]) - 1
            folders = state_manager.get_data(user_id, "folders")
            
            if 0 <= folder_idx < len(folders):
                selected_subfolder = folders[folder_idx]
                folder_path = normalize_path(selected_subfolder.path)
                folder_name = selected_subfolder.name
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–¥–ø–∞–ø–∫—É: {folder_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
                try:
                    items = list(disk_helper.disk.listdir(folder_path))
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {folder_path}")
                    
                    # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å—Ä–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    subfolders = []
                    for item in items:
                        if hasattr(item, 'type') and item.type == "dir":
                            subfolders.append(item)
                    
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(subfolders)} –ø–æ–¥–ø–∞–ø–æ–∫ –≤ {folder_path}")
                    
                    if subfolders:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –Ω–∏—Ö
                        state_manager.set_data(user_id, "selected_folder", folder_path)
                        state_manager.set_data(user_id, "folders", subfolders)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        keyboard = []
                        message = f"üìÇ –ü–æ–¥–ø–∞–ø–∫–∏ –≤ '{folder_path}':\n\n"
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                        MAX_FOLDERS_PER_MESSAGE = 20
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        for i, subfolder in enumerate(subfolders, 1):
                            keyboard.append([f"{i}. {subfolder.name}"])
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
                            if i <= MAX_FOLDERS_PER_MESSAGE:
                                message += f"{i}. üìÅ {subfolder.name}\n"
                        
                        # –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º MAX_FOLDERS_PER_MESSAGE, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if len(subfolders) > MAX_FOLDERS_PER_MESSAGE:
                            message += f"\n... –∏ –µ—â–µ {len(subfolders) - MAX_FOLDERS_PER_MESSAGE} –ø–∞–ø–æ–∫.\n"
                            message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
                        keyboard.append(["üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É"])
                        keyboard.append(["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É"])
                        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
                        
                        await update.message.reply_text(
                            message,
                            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                        )
                        
                        return NAVIGATE_SUBFOLDERS
                    else:
                        # –ï—Å–ª–∏ –ø–æ–¥–ø–∞–ø–æ–∫ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é
                        keyboard = [
                            ["üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É"],
                            ["üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫—É"], 
                            ["‚ùå –û—Ç–º–µ–Ω–∞"]
                        ]
                        
                        await update.message.reply_text(
                            f"üìÇ –í –ø–∞–ø–∫–µ '{folder_path}' –Ω–µ—Ç –ø–æ–¥–ø–∞–ø–æ–∫.\n\n"
                            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∞–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É.",
                            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
                        state_manager.set_data(user_id, "selected_folder", folder_path)
                        
                        return NAVIGATE_SUBFOLDERS
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
                    return await start_session(update, context, selected_folder, folder_path)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def create_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∞–ø–∫—É"""
    user_id = update.effective_user.id
    text = update.message.text
    selected_folder = state_manager.get_data(user_id, "selected_folder")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not text or text.isspace():
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
    new_folder_path = f"{selected_folder}/{text}"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞–ø–∫–∞
        if disk_helper.disk.exists(new_folder_path):
            await update.message.reply_text(
                f"‚ùå –ü–∞–ø–∫–∞ '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        disk_helper.disk.mkdir(new_folder_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{new_folder_path}'")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
        return await start_session(update, context, selected_folder, new_folder_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def start_session(update: Update, context: ContextTypes.DEFAULT_TYPE, root_folder: str, folder_path: str) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤—Å—Ç—Ä–µ—á–∏"""
    from src.utils.state_manager import SessionState
    
    user_id = update.effective_user.id
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
    root_folder = normalize_path(root_folder)
    folder_path = normalize_path(folder_path)
    folder_name = os.path.basename(folder_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data = get_user_data(user_id)
    user_full_name = None
    if user_data:
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        if first_name or last_name:
            user_full_name = f"{first_name} {last_name}".strip()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = SessionState(root_folder, folder_path, folder_name, user_id)
        state_manager.set_session(user_id, session)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        start_msg = f"–ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø–∞–ø–∫–µ: {folder_path}"
        session.add_message(start_msg, author=user_full_name)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
        disk_helper.create_text_file(session.txt_file_path, f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {start_msg}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏
        await update.message.reply_text(
            f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n"
            f"–ü–∞–ø–∫–∞: {folder_path}\n"
            f"–§–∞–π–ª: {session.get_txt_filename()}\n\n"
            f"‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switch\n\n"
            f"‚è± –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º job_queue –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if hasattr(context, 'job_queue') and context.job_queue is not None:
            context.job_queue.run_once(
                lambda context: check_session_activity(context, user_id),
                600,  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                data=user_id,
                name=f"session_timeout_{user_id}"
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"job_queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def check_session_activity(context: CallbackContext, user_id: int) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = state_manager.get_session(user_id)
    if not session:
        logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data="end_session")],
        [InlineKeyboardButton("‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ—â–µ 10 –º–∏–Ω—É—Ç", callback_data="extend_session")]
    ])
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é
        await context.bot.send_message(
            chat_id=user_id,
            text="‚è± –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n–•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É?",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

async def handle_session_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    if data == "end_session":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        await end_session_and_show_summary(update, context)
    elif data == "extend_session":
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—â–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
        await query.edit_message_text(
            text="‚úÖ –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –µ—â–µ –Ω–∞ 10 –º–∏–Ω—É—Ç."
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        if hasattr(context, 'job_queue') and context.job_queue is not None:
            context.job_queue.run_once(
                lambda context: check_session_activity(context, user_id),
                600,  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                data=user_id,
                name=f"session_timeout_{user_id}"
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            logger.warning(f"job_queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await query.edit_message_text(
                text="‚úÖ –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –µ—â–µ –Ω–∞ 10 –º–∏–Ω—É—Ç.\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
            )

async def end_session_and_show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    """
    user_id = update.effective_user.id
    session = state_manager.get_session(user_id)
    
    if not session:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏
    summary = session.get_session_summary()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    end_msg = f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø–∞–ø–∫–µ: {session.folder_path}"
    session.add_message(end_msg)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = disk_helper.get_file_content(session.txt_file_path)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –∑–∞–ø–∏—Å—å
        content += f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {end_msg}"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        disk_helper.update_text_file(session.txt_file_path, content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤—Å—Ç—Ä–µ—á–∏: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    state_manager.set_data(user_id, "last_session_txt_file", session.txt_file_path)
    state_manager.set_data(user_id, "last_session_folder", session.folder_path)
    state_manager.set_data(user_id, "last_session_folder_name", session.folder_name)
    state_manager.set_data(user_id, "last_session_root_folder", session.root_folder)
    state_manager.set_data(user_id, "last_session_summary", summary)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {session.txt_file_path}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–µ—Å—Å–∏—é
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏—é", callback_data="reopen_session")]
    ])
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–µ—Å—Å–∏—é —Å callback_data='reopen_session'")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏—é
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n{summary[:3900]}...",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n{summary[:3900]}...",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup=keyboard
        )
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    state_manager.clear_session(user_id)
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(context, 'job_queue') and context.job_queue is not None:
        current_jobs = context.job_queue.get_jobs_by_name(f"session_timeout_{user_id}")
        for job in current_jobs:
            job.schedule_removal()
        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        logger.warning(f"job_queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def reopen_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏—é"
    –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏—é'. User ID: {user_id}, callback_data: {query.data}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    current_session = state_manager.get_session(user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if current_session:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é", callback_data="confirm_reopen")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–π", callback_data="cancel_reopen")]
        ])
        
        await query.edit_message_text(
            text="‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –µ—ë –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π?",
            reply_markup=keyboard
        )
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
    await reopen_saved_session(update, context)

async def confirm_reopen_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    current_session = state_manager.get_session(user_id)
    if current_session:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏
        end_msg = f"–°–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏"
        current_session.add_message(end_msg)
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
            content = disk_helper.get_file_content(current_session.txt_file_path)
            content += f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {end_msg}"
            disk_helper.update_text_file(current_session.txt_file_path, content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏: {e}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        state_manager.clear_session(user_id)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é
    await reopen_saved_session(update, context)

async def cancel_reopen_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏")
    
    await query.edit_message_text(
        text="‚úÖ –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω–æ."
    )

async def reopen_saved_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
    txt_file_path = state_manager.get_data(user_id, "last_session_txt_file")
    folder_path = state_manager.get_data(user_id, "last_session_folder")
    folder_name = state_manager.get_data(user_id, "last_session_folder_name")
    root_folder = state_manager.get_data(user_id, "last_session_root_folder")
    
    if not all([txt_file_path, folder_path, folder_name, root_folder]):
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {txt_file_path}, {folder_path}, {folder_name}, {root_folder}")
        await query.edit_message_text(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ."
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        session = SessionState(root_folder, folder_path, folder_name, user_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π)
        session.txt_file_path = txt_file_path
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        reopen_msg = f"–°–µ—Å—Å–∏—è –±—ã–ª–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ: {folder_path}"
        session.add_message(reopen_msg)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        try:
            content = disk_helper.get_file_content(txt_file_path)
            content += f"\n[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {reopen_msg}"
            disk_helper.update_text_file(txt_file_path, content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_manager.set_session(user_id, session)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        await query.edit_message_text(
            text=f"‚úÖ –°–µ—Å—Å–∏—è –≤ –ø–∞–ø–∫–µ {folder_path} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω–æ."
        )
        
        logger.info(f"–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü–∞–ø–∫–∞: {folder_path}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}", exc_info=True)
        await query.edit_message_text(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}"
        )

async def switch_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –≤—Å—Ç—Ä–µ—á–∞–º–∏
    """
    user_id = update.effective_user.id
    user_session = state_manager.get_session(user_id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
    if user_session:
        await end_session_and_show_summary(update, context)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏
    return await choose_folder(update, context)

async def current_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /current - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–µ"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    session = state_manager.get_session(user_id)
    if session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_data(user_id)
        user_info = ""
        if user_data:
            first_name = user_data.get('first_name', '')
            last_name = user_data.get('last_name', '')
            if first_name or last_name:
                user_info = f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {first_name} {last_name}\n"
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        files_count = len(session.file_history)
        messages_count = len(session.message_history)
        
        await update.message.reply_text(
            f"üìù –¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n"
            f"üìÇ –ü–∞–ø–∫–∞: {session.folder_path}\n"
            f"üìÑ –§–∞–π–ª: {session.get_txt_filename()}\n"
            f"‚è± –ù–∞—á–∞–ª–æ: {session.created_at}\n"
            f"{user_info}"
            f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}, –§–∞–π–ª–æ–≤: {files_count}\n\n"
            f"‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ."
        )
    else:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É."
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏"""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏")
    
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

async def choose_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    allowed_folders = get_allowed_folders_for_user(user_id)
    
    if not allowed_folders:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø –≤—ã–∑–æ–≤–∞ (callback_query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:",
            reply_markup=None
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑—ã–≤–∞–µ–º show_folders —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞–ø–∫–∞–º–∏
        message = await update.effective_chat.send_message(
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–ø–æ–∫...",
            reply_markup=None
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º message –≤ update –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã folder_navigator
        update.message = message
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∞–ø–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞–ø–∫–∞–º
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    class VirtualFolder:
        def __init__(self, path, name):
            self.path = path
            self.name = name
            self.type = "dir"
    
    virtual_folders = [VirtualFolder(folder, folder.split('/')[-1]) for folder in allowed_folders]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["folders"] = virtual_folders
    context.user_data["current_path"] = "/"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–ø–æ–∫
    message = folder_navigator.format_folders_message("/", virtual_folders)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = folder_navigator.build_keyboard(virtual_folders, include_current_folder=False)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–ø–∫–∞–º–∏
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º allowed_folders –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    state_manager.set_user_data(user_id, "allowed_folders", allowed_folders)
    
    return CHOOSE_FOLDER 

async def handle_selected_folder(update: Update, context: ContextTypes.DEFAULT_TYPE, folder_path: str) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = update.effective_user.first_name
    if update.effective_user.last_name:
        user_name += f" {update.effective_user.last_name}"
    state_manager.set_user_data(user_id, "user_name", user_name)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ –ø—É—Ç–∏
    folder_name = folder_path.split('/')[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞)
    root_folder = "/".join(folder_path.split('/')[:-1])
    state_manager.set_user_data(user_id, "root_folder", root_folder)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    session_file = f"{folder_path}/meeting_{timestamp}.txt"
    
    state_manager.create_session(user_id, {
        "folder_path": folder_path,
        "folder_name": folder_name,
        "session_file": session_file,
        "root_folder": root_folder,
        "state": SessionState.ACTIVE
    })
    
    logging.debug(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ø–∞–ø–∫–µ {folder_path}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        disk_helper = YaDiskHelper()
        timestamp_log = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        initial_content = f"[{timestamp_log}] –°–∏—Å—Ç–µ–º–∞ [–°–ò–°–¢–ï–ú–ê]: –ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø–∞–ø–∫–µ: {folder_path}\n"
        disk_helper.create_text_file(session_file, initial_content)
        
        await update.message.reply_text(
            text=f"‚úÖ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –≤ –ø–∞–ø–∫–µ: {folder_name}\n\n"
                 f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏, –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏.\n"
                 f"üìä –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /end –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é –≤ –ø–∞–ø–∫–µ {folder_path}")
        
        return SessionState.ACTIVE
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        await update.message.reply_text(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}",
            reply_markup=None
        )
        state_manager.clear_session(user_id)
        return ConversationHandler.END 