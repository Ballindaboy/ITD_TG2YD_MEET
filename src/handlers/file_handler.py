import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from config.config import UPLOAD_DIR
from src.utils.yadisk_helper import YaDiskHelper
from src.utils.state_manager import state_manager
from src.handlers.media_handlers import (
    get_file_from_message, 
    handle_voice, 
    handle_photo, 
    handle_video,
    handle_document,
    process_transcription,
    process_transcription_edit,
    process_caption
)

logger = logging.getLogger(__name__)
yadisk_helper = YaDiskHelper()

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ –∫–æ–º–∞–Ω–¥—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if text.startswith("/"):
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"
    if text == "üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É":
        from src.handlers.command_handler import new_meeting
        await new_meeting(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = state_manager.get_session(user_id)
    if not session:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
        keyboard = [["üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"]]
        
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏.",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏
    try:
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª: {session.txt_file_path}")
        yadisk_helper.append_to_text_file(session.txt_file_path, text)
        await update.message.reply_text("üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç—á—ë—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE, handler_func=None) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = state_manager.get_session(user_id)
    if not session:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
        keyboard = [["üÜï –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É"]]
        
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏.",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_id, file_name, file_type = await get_file_from_message(update)
    
    if not file_id or not file_name:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞.")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file_name} (—Ç–∏–ø: {file_type})")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if handler_func:
        await handler_func(update, context, file_id, file_name, session)
        return
    
    # –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if file_type == "voice":
        await handle_voice(update, context, file_id, file_name, session)
    elif file_type == "photo":
        await handle_photo(update, context, file_id, file_name, session)
    elif file_type == "video":
        await handle_video(update, context, file_id, file_name, session)
    elif file_type == "audio":
        # –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ handle_voice
        await handle_voice(update, context, file_id, file_name, session)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        await handle_document(update, context, file_id, file_name, session)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if state_manager.get_data(user_id, "awaiting_transcription"):
        await process_transcription(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if state_manager.get_data(user_id, "awaiting_transcription_edit"):
        await process_transcription_edit(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
    if state_manager.get_data(user_id, "awaiting_caption"):
        await process_caption(update, context)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º, 
    # —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É" —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if update.message.text:
        await handle_text(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if (update.message.document or update.message.photo or 
        update.message.video or update.message.audio or 
        update.message.voice or update.message.video_note or 
        update.message.sticker):
        await handle_file(update, context)
        return 