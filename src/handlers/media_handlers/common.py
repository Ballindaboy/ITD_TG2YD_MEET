import os
import logging
import tempfile
from telegram import Update
from telegram.ext import ContextTypes
from src.utils.yadisk_helper import YaDiskHelper
from src.utils.state_manager import state_manager

logger = logging.getLogger(__name__)
yadisk_helper = YaDiskHelper()

async def get_file_from_message(update: Update) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.document:
        return update.message.document.file_id, update.message.document.file_name, "document"
    elif update.message.photo:
        photo = update.message.photo[-1]
        return photo.file_id, f"photo_{photo.file_unique_id}.jpg", "photo"
    elif update.message.video:
        return update.message.video.file_id, update.message.video.file_name, "video"
    elif update.message.audio:
        return update.message.audio.file_id, update.message.audio.file_name, "audio"
    elif update.message.voice:
        return update.message.voice.file_id, f"voice_{update.message.voice.file_unique_id}.ogg", "voice"
    elif update.message.video_note:
        return update.message.video_note.file_id, f"video_note_{update.message.video_note.file_unique_id}.mp4", "video_note"
    elif update.message.sticker:
        return update.message.sticker.file_id, f"sticker_{update.message.sticker.file_unique_id}.webp", "sticker"
    return None, None, None

async def download_telegram_file(context, file_id, tmp_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    file = await context.bot.get_file(file_id)
    await file.download_to_drive(tmp_path)
    logger.debug(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏–∑ Telegram –≤ {tmp_path}")
    return file

async def process_caption(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É"""
    user_id = update.effective_user.id
    caption = update.message.text
    session = state_manager.get_session(user_id)
    
    if not session:
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ    
    status_message = await update.message.reply_text("üîÑ –î–æ–±–∞–≤–ª—è—é –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É –≤ –æ—Ç—á–µ—Ç...")
        
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ —Ñ–∞–π–ª –≤—Å—Ç—Ä–µ—á–∏
        yadisk_helper.append_to_text_file(
            session.txt_file_path, 
            f"–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É: {caption}"
        )
        await status_message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á—ë—Ç.")
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {error_msg}", exc_info=True)
        
        user_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É."
        if "timeout" in error_msg.lower():
            user_message += "\n‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."
        elif "connection" in error_msg.lower():
            user_message += "\nüåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É."
        else:
            user_message += f"\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏: {error_msg[:100]}" if len(error_msg) > 100 else f"\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏: {error_msg}"
            
        await status_message.edit_text(user_message)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    state_manager.set_data(user_id, "awaiting_caption", False) 