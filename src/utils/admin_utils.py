import json
import logging
from config.config import DATA_DIR, FOLDERS_FILE, USERS_FILE
import os
from typing import Dict, List, Optional, Any, Tuple, Set, Union
from datetime import datetime

logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
ALLOWED_FOLDERS_FILE = os.path.join(DATA_DIR, 'allowed_folders.json')
ALLOWED_USERS_FILE = os.path.join(DATA_DIR, 'allowed_users.json')

# –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
_allowed_folders_cache = None
_allowed_users_cache = None

def ensure_data_dir_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    os.makedirs(DATA_DIR, exist_ok=True)

def load_allowed_folders():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(FOLDERS_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫: {str(e)}")
        return []

def save_allowed_folders(folders):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        with open(FOLDERS_FILE, 'w') as f:
            json.dump(folders, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫: {str(e)}")
        return False

def add_allowed_folder(folder_path, user_ids=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    
    Args:
        folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
        user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ None - –≤—Å–µ–º)
    """
    folders = load_allowed_folders()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞–ø–∫–∞
    for folder in folders:
        if folder['path'] == folder_path:
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user_ids is not None:
                folder['allowed_users'] = user_ids
                if save_allowed_folders(folders):
                    return True, f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–∞–ø–∫–∏ {folder_path}"
                else:
                    return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫"
            return False, "–≠—Ç–∞ –ø–∞–ø–∫–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
    new_folder = {
        'path': folder_path,
        'allowed_users': user_ids if user_ids is not None else []
    }
    
    folders.append(new_folder)
    
    if save_allowed_folders(folders):
        return True, f"–ü–∞–ø–∫–∞ {folder_path} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫"

def remove_allowed_folder(folder_path):
    """–£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    folders = load_allowed_folders()
    
    # –ò—â–µ–º –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    found = False
    new_folders = []
    for folder in folders:
        if folder['path'] == folder_path:
            found = True
        else:
            new_folders.append(folder)
    
    if not found:
        return False, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    if save_allowed_folders(new_folders):
        return True, f"–ü–∞–ø–∫–∞ {folder_path} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫"

def update_folder_permissions(folder_path, user_ids):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    folders = load_allowed_folders()
    
    # –ò—â–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    found = False
    for folder in folders:
        if folder['path'] == folder_path:
            folder['allowed_users'] = user_ids
            found = True
            break
    
    if not found:
        return False, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    if save_allowed_folders(folders):
        return True, f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ {folder_path} –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫"

def add_user_to_folder(folder_path, user_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–ø–∫–∏"""
    folders = load_allowed_folders()
    
    # –ò—â–µ–º –ø–∞–ø–∫—É
    found = False
    for folder in folders:
        if folder['path'] == folder_path:
            if user_id not in folder['allowed_users']:
                folder['allowed_users'].append(user_id)
            found = True
            break
    
    if not found:
        return False, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    if save_allowed_folders(folders):
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–∞–ø–∫–µ {folder_path}"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫"

def remove_user_from_folder(folder_path, user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–ø–∫–∏"""
    folders = load_allowed_folders()
    
    # –ò—â–µ–º –ø–∞–ø–∫—É
    found = False
    for folder in folders:
        if folder['path'] == folder_path:
            if user_id in folder['allowed_users']:
                folder['allowed_users'].remove(user_id)
            found = True
            break
    
    if not found:
        return False, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    if save_allowed_folders(folders):
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–ø–∫–∏ {folder_path}"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞–ø–æ–∫"

def get_allowed_folders_for_user(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    folders = load_allowed_folders()
    result = []
    
    for folder in folders:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ allowed_users –ø—É—Å—Ç, —Ç–æ –ø–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
        # –ò–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ allowed_users
        if not folder['allowed_users'] or user_id in folder['allowed_users']:
            result.append(folder['path'])
    
    return result

def list_allowed_folders():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    folders = load_allowed_folders()
    if not folders:
        return "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –ø—É—Å—Ç"
    
    result = "üìÇ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:\n\n"
    
    for i, folder in enumerate(folders, 1):
        result += f"{i}. {folder['path']}\n"
        
        if folder['allowed_users']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = load_allowed_users()
            user_map = {user['id']: get_user_display_name(user) for user in users}
            
            allowed_users = []
            for user_id in folder['allowed_users']:
                allowed_users.append(user_map.get(user_id, f"ID: {user_id}"))
            
            result += f"   üë• –î–æ—Å—Ç—É–ø: {', '.join(allowed_users)}\n"
        else:
            result += f"   üë• –î–æ—Å—Ç—É–ø: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
    
    return result

def load_allowed_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        return []

def save_allowed_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        return False

def add_allowed_user(user_id, username=None, first_name=None, last_name=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    users = load_allowed_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for user in users:
        if user['id'] == user_id:
            return False, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'id': user_id,
        'username': username,
        'first_name': first_name,
        'last_name': last_name,
        'added_at': get_timestamp()
    }
    
    users.append(user_data)
    
    if save_allowed_users(users):
        name = username or first_name or f"ID: {user_id}"
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

def remove_allowed_user(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    users = load_allowed_users()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    found = False
    user_name = None
    new_users = []
    for user in users:
        if user['id'] == user_id:
            found = True
            user_name = user.get('username') or user.get('first_name') or f"ID: {user_id}"
        else:
            new_users.append(user)
    
    if not found:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –ø–∞–ø–æ–∫
    folders = load_allowed_folders()
    for folder in folders:
        if user_id in folder['allowed_users']:
            folder['allowed_users'].remove(user_id)
    save_allowed_folders(folders)
    
    if save_allowed_users(new_users):
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

def list_allowed_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    users = load_allowed_users()
    if not users:
        return "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
    
    result = "üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    
    for i, user in enumerate(users, 1):
        display_name = get_user_display_name(user)
        result += f"{i}. {display_name} [ID: {user['id']}]\n"
    
    return result

def get_user_display_name(user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = user.get('username', '')
    first_name = user.get('first_name', '')
    last_name = user.get('last_name', '')
    
    name_parts = []
    if first_name:
        name_parts.append(first_name)
    if last_name:
        name_parts.append(last_name)
    full_name = ' '.join(name_parts)
    
    if username:
        if full_name:
            return f"@{username} ({full_name})"
        return f"@{username}"
    else:
        return full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'

def is_user_allowed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    users = load_allowed_users()
    return any(user['id'] == user_id for user in users)

def is_folder_allowed_for_user(folder_path, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    folders = load_allowed_folders()
    
    for folder in folders:
        if folder['path'] == folder_path:
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ allowed_users –ø—É—Å—Ç, –ø–∞–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
            # –ò–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ allowed_users
            return not folder['allowed_users'] or user_id in folder['allowed_users']
    
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö, –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    return False

def get_timestamp():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp"""
    from datetime import datetime
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

def get_user_data(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    users = load_allowed_users()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –∫–ª—é—á–∏ –≤ JSON - —Å—Ç—Ä–æ–∫–∏
    user_id_str = str(user_id)
    
    if user_id_str in users:
        user_data = users[user_id_str].copy()
        user_data['id'] = user_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –¥–∞–Ω–Ω—ã–µ
        return user_data
    
    return {'id': user_id, 'username': None, 'first_name': None, 'last_name': None, 'is_admin': False} 