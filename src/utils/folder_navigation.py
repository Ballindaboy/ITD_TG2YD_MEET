import logging
from typing import List, Dict, Any, Tuple, Optional, Callable
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from src.utils.yadisk_helper import YaDiskHelper
from src.utils.config_constants import (
    MAX_FOLDERS_PER_MESSAGE,
    BUTTON_BACK, BUTTON_CANCEL, BUTTON_ADD_FOLDER, BUTTON_CREATE_FOLDER, BUTTON_RETURN_TO_ROOT,
    FOLDER_LIST_TITLE, FOLDER_SUBFOLDERS_TITLE, FOLDER_NO_SUBFOLDERS,
    FOLDER_SELECTION_ERROR, FOLDER_INVALID_NUMBER, FOLDER_CREATION_PROMPT,
    FOLDER_CREATION_SUCCESS, FOLDER_CREATION_ERROR, FOLDER_EXISTS_ERROR
)

logger = logging.getLogger(__name__)

class FolderNavigator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –ø–∞–ø–∫–∞–º –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤ Telegram –±–æ—Ç–µ.
    """
    def __init__(
        self, 
        yadisk_helper: YaDiskHelper,
        folder_selected_callback: Optional[Callable] = None,
        title: str = FOLDER_LIST_TITLE,
        add_current_folder_button: bool = True,
        create_folder_button: bool = True,
        extra_buttons: List[str] = None,
        max_folders_per_message: int = MAX_FOLDERS_PER_MESSAGE
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –ø–æ –ø–∞–ø–∫–∞–º.
        
        Args:
            yadisk_helper: –≠–∫–∑–µ–º–ø–ª—è—Ä YaDiskHelper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º
            folder_selected_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
            add_current_folder_button: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É"
            create_folder_button: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"
            extra_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            max_folders_per_message: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        """
        self.yadisk_helper = yadisk_helper
        self.title = title
        self.add_current_folder_button = add_current_folder_button
        self.create_folder_button = create_folder_button
        self.extra_buttons = extra_buttons or []
        self.max_folders_per_message = max_folders_per_message
        self.folder_selected_callback = folder_selected_callback
    
    @staticmethod
    def normalize_path(path: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        
        Args:
            path: –ü—É—Ç—å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
        """
        path = path.replace("disk:", "")
        path = path.replace("//", "/")
        path = path.rstrip("/")
        if not path.startswith("/"):
            path = "/" + path
        return path
    
    async def get_folders(self, path: str) -> List[Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        
        Args:
            path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        """
        try:
            items = list(self.yadisk_helper.disk.listdir(path))
            return [item for item in items if item.type == "dir"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫: {str(e)}", exc_info=True)
            return []
    
    def build_keyboard(self, folders: List[Any], include_current_folder: bool = True) -> List[List[str]]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
        
        Args:
            folders: –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            include_current_folder: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è ReplyKeyboardMarkup
        """
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for i, folder in enumerate(folders, 1):
            keyboard.append([f"{i}. {folder.name}"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if include_current_folder and self.add_current_folder_button:
            keyboard.append([BUTTON_ADD_FOLDER])
        
        if self.create_folder_button:
            keyboard.append([BUTTON_CREATE_FOLDER])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        for button in self.extra_buttons:
            keyboard.append([button])
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([BUTTON_BACK])
        
        return keyboard
    
    def format_folders_message(self, path: str, folders: List[Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–ø–æ–∫
        
        Args:
            path: –¢–µ–∫—É—â–∏–π –ø—É—Ç—å
            folders: –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"{self.title}\n\n"
        
        if path != "/":
            message = FOLDER_SUBFOLDERS_TITLE.format(path=path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i, folder in enumerate(folders, 1):
            if i <= self.max_folders_per_message:
                message += f"{i}. üìÅ {folder.name}\n"
        
        # –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(folders) > self.max_folders_per_message:
            message += f"\n... –∏ –µ—â–µ {len(folders) - self.max_folders_per_message} –ø–∞–ø–æ–∫.\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ.\n"
        
        return message
    
    async def show_folders(
        self, 
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE, 
        path: str = "/"
    ) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        normalized_path = self.normalize_path(path)
        folders = await self.get_folders(normalized_path)
        
        if not folders:
            await update.message.reply_text(
                FOLDER_NO_SUBFOLDERS.format(path=normalized_path),
                reply_markup=ReplyKeyboardMarkup(
                    self.build_keyboard([], include_current_folder=True),
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ –ø—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["folders"] = folders
        context.user_data["current_path"] = normalized_path
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–ø–∫–∞–º–∏
        await update.message.reply_text(
            self.format_folders_message(normalized_path, folders),
            reply_markup=ReplyKeyboardMarkup(
                self.build_keyboard(folders),
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
    
    async def handle_folder_selection(
        self, 
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> Tuple[bool, Optional[str]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ None)
        """
        text = update.message.text
        current_path = context.user_data.get("current_path", "/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏
        if text[0].isdigit():
            folder_idx = int(text.split(".")[0]) - 1
            folders = context.user_data.get("folders", [])
            
            if 0 <= folder_idx < len(folders):
                selected_folder = folders[folder_idx]
                selected_path = self.normalize_path(selected_folder.path)
                
                logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {selected_path}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ–º callback, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if self.folder_selected_callback:
                    await self.folder_selected_callback(update, context, selected_path)
                
                return True, selected_path
            else:
                await update.message.reply_text(
                    FOLDER_INVALID_NUMBER,
                    reply_markup=ReplyKeyboardMarkup(
                        [[BUTTON_BACK]], 
                        one_time_keyboard=True, 
                        resize_keyboard=True
                    )
                )
                return False, None
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π
        return False, None
    
    async def create_folder(
        self, 
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE,
        folder_name: str
    ) -> Tuple[bool, Optional[str]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            folder_name: –ò–º—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞, –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ None)
        """
        current_path = context.user_data.get("current_path", "/")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not folder_name or folder_name.isspace():
            await update.message.reply_text(
                FOLDER_EMPTY_NAME_ERROR,
                reply_markup=ReplyKeyboardMarkup(
                    [[BUTTON_BACK]], 
                    one_time_keyboard=True, 
                    resize_keyboard=True
                )
            )
            return False, None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞–ø–∫–∞
            new_folder_path = f"{current_path}/{folder_name}"
            if self.yadisk_helper.disk.exists(new_folder_path):
                await update.message.reply_text(
                    FOLDER_EXISTS_ERROR.format(name=folder_name),
                    reply_markup=ReplyKeyboardMarkup(
                        [[BUTTON_BACK]], 
                        one_time_keyboard=True, 
                        resize_keyboard=True
                    )
                )
                return False, None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
            new_folder_path = self.yadisk_helper.create_folder(current_path, folder_name)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{new_folder_path}'")
            
            await update.message.reply_text(
                FOLDER_CREATION_SUCCESS.format(name=folder_name, path=current_path),
                reply_markup=ReplyKeyboardMarkup(
                    [[BUTTON_ADD_FOLDER], [BUTTON_BACK]],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
            context.user_data["current_path"] = new_folder_path
            
            return True, new_folder_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}", exc_info=True)
            await update.message.reply_text(
                FOLDER_CREATION_ERROR.format(error=str(e)),
                reply_markup=ReplyKeyboardMarkup(
                    [[BUTTON_BACK]], 
                    one_time_keyboard=True, 
                    resize_keyboard=True
                )
            )
            return False, None
            
    async def handle_message(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> Tuple[bool, Optional[str], Optional[str]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º.
        
        Args:
            update: –û–±—ä–µ–∫—Ç Update
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ None, —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è)
        """
        text = update.message.text
        current_path = context.user_data.get("current_path", "/")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if text == BUTTON_BACK:
            return True, None, "back"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
        if text == BUTTON_CANCEL:
            return True, None, "cancel"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫"
        if text == BUTTON_RETURN_TO_ROOT:
            await self.show_folders(update, context, "/")
            return True, "/", "root"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"
        if text == BUTTON_CREATE_FOLDER:
            await update.message.reply_text(
                FOLDER_CREATION_PROMPT.format(path=current_path),
                reply_markup=ReplyKeyboardMarkup(
                    [[BUTTON_BACK]], 
                    one_time_keyboard=True, 
                    resize_keyboard=True
                )
            )
            return True, current_path, "create_folder"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É"
        if text == BUTTON_ADD_FOLDER:
            return True, current_path, "add_folder"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É
        success, selected_path = await self.handle_folder_selection(update, context)
        if success and selected_path:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            await self.show_folders(update, context, selected_path)
            return True, selected_path, "navigate"
            
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
        await update.message.reply_text(
            FOLDER_SELECTION_ERROR,
            reply_markup=ReplyKeyboardMarkup(
                [[BUTTON_BACK]], 
                one_time_keyboard=True, 
                resize_keyboard=True
            )
        )
        return False, None, None 