"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
"""

import logging
from typing import List, Optional, Dict, Any, Tuple, Union, Callable

from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, 
    ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, Message, Bot
)
from telegram.error import TelegramError

from src.utils.error_utils import safe_execute

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
BUTTON_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BUTTON_HOME = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
BUTTON_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BUTTON_ADD = "‚úÖ –î–æ–±–∞–≤–∏—Ç—å"
BUTTON_REMOVE = "‚ùå –£–¥–∞–ª–∏—Ç—å"
BUTTON_CONFIRM = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
BUTTON_SKIP = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
BUTTON_UP = "‚¨ÜÔ∏è –í–≤–µ—Ä—Ö"
BUTTON_CREATE = "üÜï –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"
BUTTON_ADD_FOLDER = "‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É"

async def send_message(
    bot: Bot, 
    chat_id: int, 
    text: str, 
    reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove]] = None,
    parse_mode: Optional[str] = None,
    reply_to_message_id: Optional[int] = None,
    disable_web_page_preview: bool = True
) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        bot: –û–±—ä–µ–∫—Ç Bot
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ (None, HTML, Markdown)
        reply_to_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
        disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        
    Returns:
        –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        return await bot.send_message(
            chat_id=chat_id, 
            text=text, 
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            reply_to_message_id=reply_to_message_id,
            disable_web_page_preview=disable_web_page_preview
        )
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return None

async def edit_message(
    bot: Bot, 
    chat_id: int, 
    message_id: int, 
    text: str, 
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    parse_mode: Optional[str] = None,
    disable_web_page_preview: bool = True
) -> Optional[Message]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        bot: –û–±—ä–µ–∫—Ç Bot
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
        disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        
    Returns:
        –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        return await bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=disable_web_page_preview
        )
    except TelegramError as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return None

async def delete_message(bot: Bot, chat_id: int, message_id: int) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        bot: –û–±—ä–µ–∫—Ç Bot
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except TelegramError as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        if "Message to delete not found" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return False

def create_buttons(buttons: List[Tuple[str, str]], cols: int = 2) -> List[List[InlineKeyboardButton]]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤.
    
    Args:
        buttons: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏, callback_data)
        cols: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ InlineKeyboardMarkup
    """
    return [
        [InlineKeyboardButton(text, callback_data=data) for text, data in buttons[i:i+cols]]
        for i in range(0, len(buttons), cols)
    ]

def create_keyboard(buttons: List[str], cols: int = 2, one_time: bool = False, resize: bool = True) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ReplyKeyboardMarkup —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤.
    
    Args:
        buttons: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
        cols: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        one_time: –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        resize: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å–∞–π–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
    Returns:
        –û–±—ä–µ–∫—Ç ReplyKeyboardMarkup –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    keyboard = [
        [KeyboardButton(buttons[i + j]) for j in range(cols) if i + j < len(buttons)]
        for i in range(0, len(buttons), cols)
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=one_time, resize_keyboard=resize)

def format_folder_list(folders: List[str], current_path: str = "") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        folders: –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        current_path: –¢–µ–∫—É—â–∏–π –ø—É—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
    """
    if not folders:
        return "–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    path_text = f"üìÅ –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {current_path}\n\n" if current_path else ""
    
    if len(folders) > 20:
        # –ï—Å–ª–∏ –ø–∞–ø–æ–∫ –±–æ–ª—å—à–µ 20, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∏ —Å–æ–æ–±—â–∞–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        folders_text = "\n".join([f"üìÅ {folder}" for folder in folders[:20]])
        folders_text += f"\n\n...–∏ –µ—â–µ {len(folders) - 20} –ø–∞–ø–æ–∫"
    else:
        folders_text = "\n".join([f"üìÅ {folder}" for folder in folders])
    
    return f"{path_text}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:\n{folders_text}"

def format_file_list(files: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        files: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    """
    if not files:
        return "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    files_text = ""
    for i, file in enumerate(files, 1):
        file_type = file.get('type', '–§–∞–π–ª')
        file_name = file.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        file_caption = file.get('caption', '')
        caption_text = f" - {file_caption}" if file_caption else ""
        
        if file_type == 'photo':
            files_text += f"{i}. üì∑ {file_name}{caption_text}\n"
        elif file_type == 'document':
            files_text += f"{i}. üìÑ {file_name}{caption_text}\n"
        elif file_type == 'audio':
            files_text += f"{i}. üéµ {file_name}{caption_text}\n"
        elif file_type == 'video':
            files_text += f"{i}. üìπ {file_name}{caption_text}\n"
        else:
            files_text += f"{i}. üì¶ {file_name}{caption_text}\n"
    
    return f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{files_text}"

def format_user_list(users: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        users: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if not users:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    users_text = ""
    for i, user in enumerate(users, 1):
        user_id = user.get('id', '???')
        username = user.get('username', '–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        first_name = user.get('first_name', '')
        last_name = user.get('last_name', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_name = f"@{username}" if username else "No username"
        if first_name:
            display_name = first_name
            if last_name:
                display_name += f" {last_name}"
                
        users_text += f"{i}. {display_name} (ID: {user_id})\n"
    
    return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_text}" 